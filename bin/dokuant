#! /bin/bash
# encoding: utf-8
#
# Copyright 2013 Xavier Bruhiere
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# vi: set ft=bash :

#TODO test to deploy an app without user create-user

set -e

source utils.sh
source dokuant_lib.sh


log "       Dokuant       "
log "_____________________"
echo


function usage() {
    log "Usage: $0 command [SUB-COMMAND]"
}


#FIXME in vagrant env, echo don't understand \t
function display_help() {
    usage
    echo

    echo -e "Available commands:"
    echo -e "-\tdokuant create-user\t\tUpload on the server an ssh key"
    echo -e "-\tdokuant create-app\t\tMake your app ready to deploy"
    echo -e "-\tdokuant [--attach] deploy\tPush your application to the server.\n\t\t\t\t\tIf attach is specified, it will catch logs, right after."
    echo -e "-\tdokuant connect\t\t\tUse ssh to connect to your container"
    echo -e "-\tdokuant show <apps|images>\timages: Show available images you can build your application on\n\t\t\t\t\tapps:\tShow your running apps"
    echo -e "-\tdokuant help\t\t\tDisplay this message"
    echo
    echo -e "Application relative commands: dokuant app <sub-command>"
    echo -e "-\tdokuant app <sub-command>"
    echo -e "-\t\tapp start|stop|kill|remove"
    echo -e "-\t\tapp infos\t\tGet application configuration"
    echo -e "-\t\tapp commit name\t\tSave the state of the container under 'name'"
    echo -e "-\t\tapp push\t\tRegister the image on docker index"
    echo -e "-\t\tapp attach\t\tBlock waiting for logs and display them"
    echo -e "-\t\tapp logs\t\tDisplay application logs"
}


PROJECT=$(get_project_name)


case "$1" in
    create-user)
        create_dokku_user $USER
        success "Done"
    
    ;;
  
    create-app)
        #FIXME If directory clean, stop after initiating git
        create_dokku_app $USER $PROJECT
        success "Done"
  
    ;;
  
    deploy)
        #FIXME Can't give multiple words as comment, concatanate every further args ?
        if [[ $# == 2 ]]; then
            commit_comment=$2
        else
            commit_comment="Automatic commit"
        fi
        deploy_dokku_app $PROJECT $commit_comment
        #NOTE Should be able to attach ?

    ;;

    app)
        case "$2" in
            #TODO execute
            #TODO restart)  (does not work with python for now)
            start)
                if [ "$3" == "attach" ]; then
                    attach="True"
                else
                    attach="False"
                fi
                python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).container('app/$PROJECT:latest').start(attach=$attach)"
                success "Application started"
            ;;
            kill)
                python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).container('app/$PROJECT:latest').kill()"
                success "Application killed"
            ;;
            stop)
                python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).container('app/$PROJECT:latest').stop()"
                success "Application stopped"
            ;;
            infos)
                #NOTE Only on container for now
                python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).container('app/$PROJECT:latest').inspect()"
            ;;
            commit)
                #FIXME I'm pretty sure it deos not work
                #TODO If no $3, make it current time
                #TODO Understand the whole concept of repository
                tag=$3
                python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).container('app/$PROJECT:latest').commit(tag='$tag')"
                success "Application committed to app/$PROJECT:$tag"
            ;;
            push)
                die "Not available yet"
            ;;
            remove)
                python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).container('app/$PROJECT:latest').remove()"
                success "Application destroyed"
            ;;
            attach)
                python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).container('app/$PROJECT:latest').attach()"
            ;;
            logs)
                python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).container('app/$PROJECT:latest').logs(display=True)"
            ;;
            *)
                die "Usage: dokuant app command"
            ;;
        esac
    ;;

    connect)
        interpreter=$2
        #TODO Right now ssh is the only working interpreter
        repl_container $PROJECT "ssh"

    ;;

    show)
        #TODO Add docker search images
        if [ "$2" == "apps" ]; then
            python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).list_containers()"
        elif [ "$2" == "images" ]; then
            python -c "from docker_client import DockerClient; DockerClient(host='$server_ip', port=$server_port).list_images()"
        else
            die "Unknown object: $2"
        fi

    ;;

    help)
        display_help

    ;;

    *)
        usage
        die "..."
    ;;
esac
