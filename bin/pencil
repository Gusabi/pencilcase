#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2013 xavier <xavier@laptop-300E5A>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


'''pencil.

Usage:
    pencil --version
    pencil -h | --help
    pencil create (user | app)
    pencil (start | deploy) [--attach] [--comment=<message>]
    pencil set <key> <value> [--app=<name>]
    pencil get <key> [--app=<name>]
    pencil (connect | log | attach | stop | kill | remove) [--app=<app>]
    pencil snapshot [--name=<name>] [--tag=<tag>] [--app=<app>]

Options:
    --version               Show version.
    -h --help               Show this screen.
    --app <app>             Run the command against the app named <app>.
    --attach                After deployement, will cath app logs.
    --name <name>           Provide image name for commit.
    --tag <tag>             Provide tag for commit [default: latest].
    --comment <comment>     Git commit message [default: Automatic-commit].
'''


#TODO Add help for set and get
#TODO Git stuff from bash to here
#TODO ssh as well, check juju sources they did it


from docopt import docopt
import os
from clint.textui import puts, colored
from docker_client import DockerClient
import redis
import sys
import time


def log(message):
    puts('[ ' + colored.blue('..') + ' ] ' + message)


def success(message):
    puts('[ ' + colored.green('OK') + ' ] ' + message)


def fail(message):
    puts('[' + colored.red('FAIL') + '] ' + message)


class Pencil(DockerClient):

    def __init__(self, app=None, **kwargs):
        DockerClient.__init__(self, **kwargs)

        self._username = os.getlogin()

        # If app name was not provided, assuming it is directory name
        self.app = os.path.split(os.getcwd())[-1] if app is None else app
        is_tagged = self.app.find(':')
        if is_tagged != -1:
            # Tag was provided
            self.tag = self.app[(is_tagged + 1):]
            self.app = self.app[:is_tagged]
        else:
            # Default one
            self.tag = 'latest'

        #TODO Something more reliable
        self._shell = os.system

        #TODO Not always connect to redis ?
        #NOTE db keyworld ?
        self.redis_client = redis.StrictRedis(
            host=kwargs.get('host', 'localhost'), port=6379, db=0)
        try:
            self.redis_client.echo('ping')
            success('Connected to configuration server.')
        except redis.ConnectionError, e:
            fail(e.message)

    def create_user(self):
        log('Registering {} account'.format(self._username))
        result = self.redis_client.hset(
            self.app, 'username', self._username)
        success('Got: {}'.format(result))

        self._shell('dokuant create-user {}'.format(self._username))
        success('Done')

    def create_app(self):
        log('Initializing dokku application...')
        self._shell('dokuant create-app {} {}'.format(
            self._username, self.app))
        success('Done')

    def deploy(self, attach=False, comment='automatic'):
        self._shell('dokuant deploy {} {}'.format(self.app, comment))

        if attach:
            try:
                container = self.container(
                    '{}/{}:latest'.format(self._username, self.app))
                container.attach()
            except ValueError, e:
                fail(e.message)

    def get(self, key):
        if key == 'images':
            self.list_images()
        elif key == 'apps':
            self.list_containers()
        #NOTE Kind of a conflic with get config
        elif key == 'status':
            try:
                container = self.container(
                    '{}/{}:latest'.format(self._username, self.app))
                container.inspect()
            except ValueError, e:
                fail(e.message)
        else:
            log('Requesting value of {} (namespace {})'.format(
                key, self.app))
            if key == 'config':
                result = self.redis_client.hgetall(self.app)
            else:
                result = self.redis_client.hget(
                    self.app, key)

            success('{} = {}'.format(key, result))

    def set(self, key, value):
        log('Setting config key "{}" to "{}" (namespace {})'.format(
            key, value, self.app))
        feedback = self.redis_client.hset(self.app, key, value)
        success('Got: {}'.format(feedback))

    def connect(self, ip):
        # If needed, run or restart an ssh-ready requested image
        #FIXME No decr if container already running
        mapped_ssh_port = self.redis_client.decr('default_ssh_port')
        log('Mapping ssh port to {}'.format(mapped_ssh_port))

        self.run('{}/{}:{}'.format(self._username, self.app, self.tag),
                 '/usr/sbin/sshd -D',
                 ports=['{}:22'.format(mapped_ssh_port)])

        # Depending on what did run function, ssh port could not be the
        # one we gave. So we fetch this information back
        real_ssh_port = self.container('{}/{}:{}'.format(
            self._username, self.app, self.tag)).forwarded_ssh()
        time.sleep(1)  # Wait for the container to boot I guess

        self._shell('ssh root@{} -p {}'.format(ip, real_ssh_port))

    def get_container(self):
        try:
            container = self.container(
                '{}/{}:{}'.format(self._username, self.app, self.tag))
        except ValueError, e:
            fail(e.message)
            sys.exit(1)

        return container

    def snapshot(self, newname, newtag):
        newtag = newtag if newtag else pencil.tag

        container.commit(repository='{}/{}'.format(self._username, newname),
                         tag=newtag,
                         author=self._username)
        success('Application committed to {}/{}:{}'.format(
            self._username, newname, newtag))

if __name__ == '__main__':
    args = docopt(__doc__, version='Dokku client, pencil v0.3')

    try:
        server_ip = os.environ['SERVERDEV_IP']
        docker_port = os.environ['SERVERDEV_PORT']
    except KeyError, e:
        fail(e.message)
        sys.exit(1)

    pencil = Pencil(app=args['--app'], host=server_ip, port=docker_port)

    if args['create']:
        if args['user']:
            pencil.create_user()

        if args['app']:
            pencil.create_app()

    elif args['deploy']:
        pencil.deploy()

    elif args['get']:
        pencil.get(args['<key>'])

    elif args['set']:
        pencil.set(args['<key>'], args['<value>'])

    elif args['connect']:
        pencil.connect(server_ip)

    # Here we go for docker stuff
    else:
        container = pencil.get_container()
        #TODO execute
        #TODO push
        #TODO restart, does not work for now
        if args['start']:
            container.start(attach=args['--attach'])
            success('Application started.')

        elif args['kill']:
            container.kill()
            success('Application killed.')

        elif args['stop']:
            container.stop()
            success('Application stopped.')

        elif args['remove']:
            container.remove()
            success('Application destroyed.')

        elif args['attach']:
            container.attach()

        elif args['log']:
            container.logs(display=True)

        elif args['snapshot']:
            pencil.snapshot(args['--name'], args['--tag'])
